export global Logic := {
  callback roundoff(float, int) -> string;
}

export Slider := Rectangle {
    property<string> text;
    property<float> value: 0.0;
    property<color> indicatorColor: lightgreen;
    callback changed();
    
    height: text.height + padding-top + padding-bottom;
    width: text.width + padding-left + padding-right;
    clip: true;

    padding-left: 8px;
    padding-right: 8px;
    padding-top: 3px;
    padding-bottom: 3px;

    border-color: black;
    border-radius: 3px;
    border-width: 1px;

    TouchArea {
    
        valueIndicator := Rectangle {
            width: root.width * value;
            border-width: root.border-width;
            border-radius: root.border-radius;
            
            color: root.indicatorColor;
        }

        text := Text {
            x: root.padding-right;
            y: root.padding-top;
            text: root.text + ": " + Logic.roundoff(root.value, 2);
        }
        borderRectanlge := Rectangle {
        border-color: root.border-color;
        border-width: root.border-width;
        border-radius: root.border-radius;
        }

        moved => {
            root.value = min(max(mouse-x / root.width, 0.0), 1.0);
            changed();
        }

        clicked => {
            moved();
        }
    }
}


export VUMeter :=  Rectangle {
    property<float> value: 0;
    
    property<length> height_bar: 10px;
    property<length> width_bar: 10px;
    property<length> padding_bar: 1px;
    property<length> border_bar: 1px;
    property<[color]> bar_colors: [
        Colors.red,
        Colors.green,
        Colors.green,
        Colors.green,
        Colors.green,
        Colors.green,
        Colors.green,
        Colors.green,
        Colors.green,
    ];
    property<int> level_i: bar_colors.length * value;
    Rectangle {
        width: width_bar ;
        height: (height_bar - padding_bar) * (bar_colors.length) + border_bar * 2;
        background: white;
        border-width: 1px;
        border-color: black;
        VerticalLayout {
            padding: padding_bar;
            for color[index] in bar_colors : Rectangle {
                height: height_bar - padding_bar;
                width: width_bar - padding_bar * 2 ;
                background: bar_colors.length - index > level_i ? white : color;
                border-width: border_bar;
                border-color: lightgrey;
            }
        }
    }
}

HelloWorld := Window {
  width: 100px;
  height: 150px;
  property<float> volume: 0.0;
  property<float> vumeter: 0.0;
  callback ui_update(string, float);

  Slider {
    y: 100px;
    value <=> volume;
    text: "Volume";
    changed => {
      ui_update("volume", value);
    }
  }


  Text {
    y: 60px;
    x: 20px;
    text: Logic.roundoff(vumeter, 2) + "dB";
  }

  VUMeter {
    value: vumeter / 70 + 1;
  }
}
